/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.openjfx.javafxplugin' version '0.0.11'//'0.0.8'
    //id 'org.beryx.jlink' version '2.24.4'
    id 'org.beryx.runtime' version '1.12.7'
     //id 'org.graalvm.buildtools.native' version '0.9.12'
 //   id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.15'
}
ext {
    junitVersion = '5.7.1'
}
/*jlink {
    
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'ElectroField'
    }
}*/
runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
    }

    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        imageName = "Electric Field Simulator"
        installerName = "electric-field-simulator-installer"
        appVersion = "1.1"
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/ico.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'AbobaStudio']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'efield','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'efield']
        }
    }
   
   // modules = ['java.naming', 'javafx.controls', 'javafx.fxml',  "javafx.graphics", "javafx.web"]
}

/*graalvmNative {
    useArgFile = false // required for older GraalVM releases
    binaries {
        main {
            useFatJar = true
        }
    }
     binaries.all {
         resources.autodetect()
     }
     toolchainDetection = false
 }*/
java {
    /*toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }*/
    targetCompatibility = 17
}
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

javafx {
    version = '19'//"14.0.2"
    modules = ['javafx.controls', 'javafx.fxml',"javafx.base",  "javafx.graphics", "javafx.web"]
    //mainClass 'main.App'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    //implementation "com.gluonhq:charm-glisten:6.0.5"

    implementation 'org.codehaus.groovy:groovy-all:3.0.5'
    //implementation 'com.jfoenix:jfoenix:9.0.10'
    //implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.9'
    //implementation 'io.github.palexdev:materialfx:11.13.5'
    implementation 'io.github.mkpaz:atlantafx-base:1.1.0'
     implementation 'org.jfxtras:jmetro:11.6.14'  
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    //implementation group: 'com.panemu', name: 'tiwulfx', version: '2.0'


}

application {
    // Define the main class for the application.
    mainClass = 'project.Main'
    mainClassName = 'project.Main'
    
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "project.Main"
    }
    /*from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }*/
}
test {
    useJUnitPlatform()
}
shadowJar {
    archiveBaseName.set('app-all')
    archiveClassifier.set('')
    archiveVersion.set('')
}
